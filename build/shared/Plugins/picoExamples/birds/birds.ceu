emit WINDOW_SET_TITLE("Birds");
emit WINDOW_SET_SIZE(640,480,640,480);
emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_BLACK);
emit FRAMES_SET(yes);

code/call Intersects (var& Rect rct1, var& Rect rct2) -> yes/no
do
    escape rct1.x+rct1.w/2 >= rct2.x-rct2.w/2 and
           rct1.x-rct1.w/2 <= rct2.x+rct2.w/2 and
           rct1.y+rct1.h/2 >= rct2.y-rct2.h/2 and
           rct1.y-rct1.h/2 <= rct2.y+rct2.h/2;
end

code/await Bird (var integer y, var integer speed)
                    -> (var Rect rct, event none go_collided)
                        -> none
do
    rct = val Rect(-320+20,y, 50,45);

    #define PI 3.14

    event yes/no go_invisible;
    var real sin = 0;
    par/or do
        var integer out = _;
        do/out
            watching go_collided do
                var integer yy = rct.y;
                var real x = rct.x;
                var integer dt;
                every dt in FRAMES_UPDATE do
                    var real v = dt*speed;
                    x = x + v/1000;
                    rct.x = x as integer;
                    rct.y = yy - speed/5*_sin(sin);
                    sin = sin + PI*v/100000;
                    if rct.x > 320 then
                        escape/out;
                    end
                end
            end

            var real yy = rct.y;
            var integer dt;
            every dt in FRAMES_UPDATE do
                yy = yy - dt*0.5;
                rct.y = yy as integer;
                if rct.y <= -240+20 then
                    rct.y = -240+20;
                    break;
                end
            end

            watching 1s do
                loop do
                    emit go_invisible(yes);
                    await 100ms;
                    emit go_invisible(no);
                    await 100ms;
                end
            end
        end
    with
        pause/if go_invisible do
            every FRAMES_REDRAW do
                if ((((sin+PI/2)/PI) as integer) % 2) == 0 then
                    emit GRAPHICS_DRAW_BMP(rct.x,rct.y, "res/clumsy_dn.bmp");
                else
                    emit GRAPHICS_DRAW_BMP(rct.x,rct.y, "res/clumsy_up.bmp");
                end
            end
        end
    end
end

event yes/no go_pause;
par do
    pause/if go_pause do
        pool[] Bird birds;
        par do
            every 500ms do
                spawn Bird(20+_rand()%350-200, 100+_rand()%100) in birds;
            end
        with
            every FRAMES_UPDATE do
                var&? Bird bird1;
                loop bird1 in birds do
                    var&? Bird bird2;
                    loop bird2 in birds do
                        if (&&bird1!.rct as usize)<(&&bird2!.rct as usize)
                            and (call Intersects(&bird1!.rct,&bird2!.rct))
                        then
                            emit bird1!.go_collided;
                            emit bird2!.go_collided;
                            break;
                        end
                    end
                end
            end
        with
            loop do
                var integer x;
                var integer y;
                (_,x,y) = await MOUSE_CLICK;
                var&? Bird bird = do
                    var&? Bird b;
                    loop b in birds do
                        var Point pt = val Point(x,y);
                        if _SDL_Rect_vs_Point(&&b!.rct as _SDL_Rect&&, &&pt as _SDL_Point&&) == 1 then
                            escape &b;
                        end
                    end
                end;
                watching bird do
                    every FRAMES_REDRAW do
                        emit GRAPHICS_SET_COLOR_NAME(COLOR_WHITE);
                        emit GRAPHICS_DRAW_LINE(0,-240, bird.rct.x,bird.rct.y);
                    end
                end
            end
        end
    end
with
    loop do
        do
            var integer key = await KEY_PRESS until key==KEY_o;
        end
        emit go_pause(yes);
        par/or do
            every FRAMES_REDRAW do
                emit GRAPHICS_DRAW_BMP(150,80, "res/pause.bmp");
            end
        with
            var integer key = await KEY_PRESS until key==KEY_o;
        end
        emit go_pause(no);
    end
end
