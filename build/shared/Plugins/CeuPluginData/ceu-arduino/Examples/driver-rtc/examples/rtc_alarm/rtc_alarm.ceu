#include "wclock.ceu"
#include "rtc.ceu"

_Serial.begin(9600);
await Rtc(on);

// Disarm alarms and clear alarms for this example, because alarms is battery backed.
// Under normal conditions, the settings should be reset after power and restart microcontroller.
await Rtc_arm_alarm1(false);
await Rtc_arm_alarm2(false);

await Rtc_clear_alarm1();
await Rtc_clear_alarm2();
await Rtc_set_time(2014, 4, 25, 0, 0, 0); // (Year, Month, Day, Hour, Minute, Second)

// Set Alarm - Every second.
// DS3231_EVERY_SECOND is available only on Alarm1.
// setAlarm1(Date or Day, Hour, Minute, Second, Mode, Armed = true)
// setAlarm1(0, 0, 0, 0, DS3231_EVERY_SECOND);

// Set Alarm - Every full minute.
// DS3231_EVERY_MINUTE is available only on Alarm2.
// setAlarm2(Date or Day, Hour, Minute, Second, Mode, Armed = true)
// setAlarm2(0, 0, 0, 0, DS3231_EVERY_MINUTE);
  
// Set Alarm1 - Every 20s in each minute
// setAlarm1(Date or Day, Hour, Minute, Second, Mode, Armed = true)
await Rtc_set_alarm1(0, 0, 0, 20, {DS3231_MATCH_S},true);

// Set Alarm2 - Every 01m in each hour
// setAlarm2(Date or Day, Hour, Minute, Mode, Armed = true)
await Rtc_set_alarm2(0, 0, 1, {DS3231_MATCH_M},true);

// Set Alarm - Every 01m:25s in each hour
// setAlarm1(Date or Day, Hour, Minute, Second, Mode, Armed = true)
// setAlarm1(0, 0, 1, 25, DS3231_MATCH_M_S);

// Set Alarm - Every 01h:10m:30s in each day
// setAlarm1(Date or Day, Hour, Minute, Second, Mode, Armed = true)
// setAlarm1(0, 1, 10, 30, DS3231_MATCH_H_M_S);

// Set Alarm - 07h:00m:00s in 25th day in month
// setAlarm1(Date or Day, Hour, Minute, Second, Mode, Armed = true)
// setAlarm1(25, 7, 0, 0, DS3231_MATCH_DT_H_M_S);

// Set Alarm - 10h:45m:30s in every Friday (1 - Mon, 7 - Sun)
// setAlarm1(Date or Day, Hour, Minute, Second, Mode, Armed = true)
// setAlarm1(5, 10, 40, 30, DS3231_MATCH_DY_H_M_S);

var bool isArmed1= await Rtc_is_armed1();
if isArmed1 then

  _Serial.print("Alarm1 is triggered ");

  /*
  a1 = getAlarm1();
  {
    switch (getAlarmType1())
    {
      case DS3231_EVERY_SECOND:
        Serial.println("every second");
        break;
      case DS3231_MATCH_S:
        Serial.print("when seconds match: ");
        Serial.println(dateFormat("__ __:__:s", a1));
        break;
      case DS3231_MATCH_M_S:
        Serial.print("when minutes and sencods match: ");
        Serial.println(dateFormat("__ __:i:s", a1));
        break;
      case DS3231_MATCH_H_M_S:
        Serial.print("when hours, minutes and seconds match: ");
        Serial.println(dateFormat("__ H:i:s", a1));
        break;
      case DS3231_MATCH_DT_H_M_S:
        Serial.print("when date, hours, minutes and seconds match: ");
        Serial.println(dateFormat("d H:i:s", a1));
        break;
      case DS3231_MATCH_DY_H_M_S:
        Serial.print("when day of week, hours, minutes and seconds match: ");
        Serial.println(dateFormat("l H:i:s", a1));
        break;
      default: 
        Serial.println("UNKNOWN RULE");
        break;
    }
  }
  */
else
  _Serial.println("Alarm1 is disarmed.");
end

var bool isArmed2= await Rtc_is_armed2();
if isArmed2 then
  
  _Serial.print("Alarm2 is triggered ");
  /*
  a2 = await Rtc_get_alarm2();
  
  var u8 getAlarmType2 = await Rtc_get_alarm_type2();
  {
  switch (@getAlarmType2)
    {
      case DS3231_EVERY_MINUTE:
        Serial.println("every minute");
        break;
      case DS3231_MATCH_M:
        Serial.print("when minutes match: ");
        Serial.println(dateFormat("__ __:i:s", a2));
        break;
      case DS3231_MATCH_H_M:
        Serial.print("when hours and minutes match:");
        Serial.println(dateFormat("__ H:i:s", a2));
        break;
      case DS3231_MATCH_DT_H_M:
        Serial.print("when date, hours and minutes match: ");
        Serial.println(dateFormat("d H:i:s", a2));
        break;
      case DS3231_MATCH_DY_H_M:
        Serial.println("when day of week, hours and minutes match: ");
        Serial.print(dateFormat("l H:i:s", a2));
        break;
      default: 
        Serial.println("UNKNOWN RULE"); 
        break;
    }
  }
  */
else
  _Serial.println("Alarm2 is disarmed.");
end

loop do
  var[7] u16 time_data;
  await Rtc_get_time(&time_data);
  _Serial.print("Date and Time: ");
  _Serial.print(time_data[6]);   _Serial.print("-");
  _Serial.print(time_data[5]);  _Serial.print("-");
  _Serial.print(time_data[4]);    _Serial.print(" ");
  _Serial.print(time_data[2]);   _Serial.print(":");
  _Serial.print(time_data[1]); _Serial.print(":");
  _Serial.print(time_data[0]); _Serial.println("");

  // await Rtc_is_alarm1(false) if you want clear alarm1 flag manualy by Rtc_clear_alarm1();
  var bool isAlarm1 = await Rtc_is_alarm1(true);
  if isAlarm1 then
    _Serial.println("ALARM 1 TRIGGERED!");
  end

  // await Rtc_is_alarm2(false) if you want clear alarm2 flag manualy by Rtc_clear_alarm2();
  var bool isAlarm2 = await Rtc_is_alarm2(true);
    if isAlarm2 then
        _Serial.println("ALARM 2 TRIGGERED!");
    end
 
    await 1s;
end