#if 1
emit GRAPHICS_DRAW_TEXT(0,0,"= WIN =");
await 1s;

    // pico-Ceu -> new title -> pico-Ceu
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"new title");
    await 1s;
    emit WINDOW_SET_TITLE("new title");
    await 1s;
    emit WINDOW_SET_TITLE("pico-Ceu");
    await 1s;

    // black -> red -> black
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"red");
    await 1s;
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_RED);
    emit WINDOW_CLEAR();
    await 1s;
    emit GRAPHICS_DRAW_TEXT(0,0,"black");
    await 1s;
    emit WINDOW_SET_CLEAR_COLOR_RGB(0,0,0);
    emit WINDOW_CLEAR();
    await 1s;

    // (51,51) -> (11,11) -> (51,51)
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"500/10,10");
    await 1s;
    emit WINDOW_SET_SIZE(550,550,11,11);
    await 1s;
    emit WINDOW_SET_SIZE(510,510,51,51);
    await 1s;

    // grid -> no grid -> grid
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"no grid");
    await 1s;
    emit WINDOW_SET_GRID(no);
    await 1s;
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"grid");
    await 1s;
    emit WINDOW_SET_GRID(yes);
    await 1s;
#endif

#if 1
emit WINDOW_CLEAR();
emit GRAPHICS_DRAW_TEXT(0,0,"= SOUND =");
await 1s;

    var int vol;
    loop vol in [0 -> 100], 10 do
        emit WINDOW_CLEAR();
        var[10] byte str;
        _snprintf(&&str[0],10, "%d", vol);
        emit GRAPHICS_DRAW_TEXT(0,0,&&str[0]);
        emit SOUND_SET_VOLUME(vol);
        emit SOUND_PLAY("res/click1.wav");
        await 500ms;
    end
#endif

#if 1
emit WINDOW_CLEAR();
emit GRAPHICS_DRAW_TEXT(0,0,"= GRAPHICS =");
await 1s;

    // white -> red -> white
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"W -> G");
    await 1s;
    emit GRAPHICS_SET_COLOR_NAME(COLOR_GREEN);
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"G -> W");
    await 1s;
    emit GRAPHICS_SET_COLOR_RGB(0xFF,0xFF,0xFF);
    await 1s;
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"white");
    await 1s;

    // FONT

    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"- FONT -");
    await 1s;

    // 1 -> 50 ppt
    var int size;
    loop size in [1 -> 50], 1 do
        emit WINDOW_CLEAR();
        var[10] byte str;
        _snprintf(&&str[0],10, "%d", size);
        emit GRAPHICS_SET_FONT("tiny.ttf", size);
        emit GRAPHICS_DRAW_TEXT(0,0,&&str[0]);
        await 250ms;
    end

    // FreeSans 10
    emit WINDOW_CLEAR();
    emit GRAPHICS_SET_FONT("res/FreeSans.ttf", 10);
    emit GRAPHICS_DRAW_TEXT(0,0,"FreeSans");
    await 1s;

    // Tiny 10
    emit GRAPHICS_SET_FONT("tiny.ttf", 10);
    await 1s;

    // CURSOR

    emit WINDOW_CLEAR();
    emit GRAPHICS_WRITELN("line 1");
    await 1s;
    emit GRAPHICS_WRITELN("line 2");
    await 1s;

    // move to (-10,10) pixels
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"(-10,10)");
    emit GRAPHICS_SET_WRITE_CURSOR(-10,10);
    await 1s;
    emit WINDOW_CLEAR();
    emit GRAPHICS_WRITELN("line 1");
    await 1s;
    emit GRAPHICS_WRITELN("line 2");
    await 1s;

    // -> 1 2 3
    emit GRAPHICS_WRITE("1");
    await 1s;
    emit GRAPHICS_WRITE("2");
    await 1s;
    emit GRAPHICS_WRITE("3");
    await 1s;

    // BMP
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"bmp");
    await 1s;
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_WHITE);
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_BMP(0,0, "res/star.bmp");
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_BLACK);
    await 1s;

    // BMP / FRAME / SIZE / SCALE
    var int scale;
    loop scale in [1->3] do
        emit GRAPHICS_SET_SCALE(scale*0.5,scale*0.5);

        var int y;
        loop y in [0 -> 10[ do
            emit WINDOW_CLEAR();
            emit GRAPHICS_SET_BMP_FRAME(1, 4);
            emit GRAPHICS_SET_BMP_SIZE(_,10);
            emit GRAPHICS_DRAW_BMP(0,y, "res/ship.bmp");
            await 100ms;
        end
        var int i;
        loop i in [0 <- 10[ do
            emit WINDOW_CLEAR();
            emit GRAPHICS_SET_BMP_FRAME(3, 4);
            emit GRAPHICS_SET_BMP_SIZE(10,_);
            emit GRAPHICS_DRAW_BMP(10-i,i, "res/ship.bmp");
            await 100ms;
        end
        var int x;
        loop x in ]-10 <- 10[ do
            emit WINDOW_CLEAR();
            emit GRAPHICS_SET_BMP_FRAME(2, 4);
            emit GRAPHICS_SET_BMP_SIZE(10,10);
            emit GRAPHICS_DRAW_BMP(x,0, "res/ship.bmp");
            await 100ms;
        end
        var int j;
        loop j in ]-10 -> 0] do
            emit WINDOW_CLEAR();
            emit GRAPHICS_SET_BMP_FRAME(3, 4);
            emit GRAPHICS_SET_BMP_SIZE(10,10);
            emit GRAPHICS_DRAW_BMP(j,j+10, "res/ship.bmp");
            await 100ms;
        end
        loop y in [0 <- 10[ do
            emit WINDOW_CLEAR();
            emit GRAPHICS_SET_BMP_FRAME(0, 4);
            emit GRAPHICS_SET_BMP_SIZE(10,_);
            emit GRAPHICS_DRAW_BMP(0,y, "res/ship.bmp");
            await 100ms;
        end
    end

    await 1s;
    emit GRAPHICS_SET_BMP_SIZE(_,_);
    emit GRAPHICS_DRAW_BMP(0,0, "res/ship.bmp");

    await 1s;
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_WHITE);
    emit WINDOW_CLEAR();
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_SET_BMP_FRAME(_,_);
    emit GRAPHICS_SET_BMP_SIZE(_,_);
    emit GRAPHICS_DRAW_BMP(0,0, "res/star.bmp");
    await 1s;

    // PIXEL
    emit WINDOW_CLEAR();
    emit GRAPHICS_SET_WRITE_CURSOR(-25,25);
    emit GRAPHICS_WRITELN("X pixels");
    emit GRAPHICS_WRITELN("red/blue");
    await 1s;
    emit WINDOW_CLEAR();
    par/and do
        var integer i;
        loop i in [-25 -> 25] do
            emit GRAPHICS_SET_COLOR_RGB(0xFF,0,0);
            emit GRAPHICS_DRAW_PIXEL(i,i);
            await 100ms;
        end
    with
        var integer i;
        loop i in [-25 -> 25] do
            emit GRAPHICS_SET_COLOR_NAME(COLOR_BLUE);
            emit GRAPHICS_DRAW_PIXEL(i,-i);
            await 100ms;
        end
    end

    // RECT / LINE
    emit WINDOW_CLEAR();
    emit GRAPHICS_WRITELN("rect");
    emit GRAPHICS_WRITELN("lines");
    await 1s;
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_WHITE);
    emit WINDOW_CLEAR();
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_RECT(0,0, 10,20);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_GREEN);
    emit GRAPHICS_DRAW_LINE(-25,-25,25,25);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLUE);
    emit GRAPHICS_DRAW_LINE(-25,25,25,-25);
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_BLACK);
    await 1s;

    // ANCHOR
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_WHITE);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"anchor");
    await 1s;
    emit WINDOW_CLEAR();

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_LEFT,VANCHOR_TOP);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_RECT(-24,24, 5,5);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(-24,24);

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_CENTER,VANCHOR_TOP);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_RECT(0,24, 5,5);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(0,24);

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_RIGHT,VANCHOR_TOP);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_RECT(24,24, 5,5);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(24,24);

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_LEFT,VANCHOR_CENTER);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_TEXT(-24,0, ">LC");
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(-24,0);

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_CENTER,VANCHOR_CENTER);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_TEXT(0,0, ">CC<");
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(0,0);

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_RIGHT,VANCHOR_CENTER);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_TEXT(24,0, "RC<");
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(24,0);

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_LEFT,VANCHOR_BOTTOM);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_BMP(-24,-24, "res/star.bmp");
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(-24,-24);

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_CENTER,VANCHOR_BOTTOM);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_BMP(0,-24, "res/star.bmp");
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(0,-24);

    await 1s;
    emit GRAPHICS_SET_ANCHOR(HANCHOR_RIGHT,VANCHOR_BOTTOM);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_DRAW_BMP(24,-24, "res/star.bmp");
    emit GRAPHICS_SET_COLOR_NAME(COLOR_RED);
    emit GRAPHICS_DRAW_PIXEL(24,-24);

    await 1s;
    emit GRAPHICS_SCREENSHOT("res/screenshot.bmp");

    await 1s;
    emit WINDOW_SET_CLEAR_COLOR_NAME(COLOR_BLACK);
    emit GRAPHICS_SET_COLOR_NAME(COLOR_WHITE);
    emit GRAPHICS_SET_ANCHOR(HANCHOR_CENTER,VANCHOR_CENTER);
    emit WINDOW_CLEAR();
    emit GRAPHICS_DRAW_TEXT(0,0,"screenshot");
    await 1s;
#endif

#if 1
emit WINDOW_CLEAR();
emit GRAPHICS_DRAW_TEXT(0,0,"= INPUT =");
await 1s;

    emit GRAPHICS_SET_FONT("tiny.ttf", 8);
    par do
        var integer key;
        every key in KEY_PRESS do
            var[25] byte str;
            emit WINDOW_CLEAR();
            _snprintf(&&str[0],25, "press: %d", key);
            emit GRAPHICS_DRAW_TEXT(0,0,&&str[0]);
        end
    with
        var integer key;
        every key in KEY_UNPRESS do
            var[25] byte str;
            _snprintf(&&str[0],25, "unpress: %d", key);
            emit WINDOW_CLEAR();
            emit GRAPHICS_DRAW_TEXT(0,0,&&str[0]);
        end
    with
        var integer x;
        var integer y;
        every (x,y) in MOUSE_MOVE do
            var[25] byte str;
            _snprintf(&&str[0],25, "move: %d,%d", x,y);
            emit WINDOW_CLEAR();
            emit GRAPHICS_DRAW_TEXT(0,0,&&str[0]);
        end
    with
        var integer x;
        var integer y;
        every (_,x,y) in MOUSE_CLICK do
            var[25] byte str;
            _snprintf(&&str[0],25, "click: %d,%d", x,y);
            emit WINDOW_CLEAR();
            emit GRAPHICS_DRAW_TEXT(0,0,&&str[0]);
        end
    with
        var integer x;
        var integer y;
        every (_,x,y) in MOUSE_UNCLICK do
            var[25] byte str;
            _snprintf(&&str[0],25, "unclick: %d,%d", x,y);
            emit WINDOW_CLEAR();
            emit GRAPHICS_DRAW_TEXT(0,0,&&str[0]);
        end
    end
#endif
