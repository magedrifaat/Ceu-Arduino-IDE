code/await Collisions (none) -> NEVER
do
    par do
        // cloud vs cloud
        every (_rand()%3)s do
            var& Cloud cloud1;
            loop cloud1 in outer.clouds do
                var& Cloud cloud2;
                loop cloud2 in outer.clouds do
                    if (&&cloud1.physics as usize) < (&&cloud2.physics as usize)
                        and (call Intersects(&cloud1.physics, &cloud2.physics))
                    then
                        emit cloud1.go_blink;
                        emit cloud2.go_blink;
                        var Vector2D pst =
                            val Vector2D(
                                ((cloud1.physics.x.pst + cloud2.physics.x.pst + cloud2.physics.x.len)/2) as integer,
                                ((cloud1.physics.y.pst - cloud1.physics.y.len + cloud2.physics.y.pst - cloud2.physics.y.len)/2) as integer,
                            );
                        spawn Light(&outer.lights,pst,_,_,_) in outer.lights;
                    end
                end
            end
        end
    with
        // car vs boom
        var integer dt;
        every dt in FRAMES_UPDATE do
            var&? Boom boom;
            loop boom in outer.booms do
                if (call Intersects(&boom!.physics, &outer.car.physics)) then
                    var Vector2D vel = call Boom_Vel(&boom!.physics, &outer.car.physics);
                    outer.car.physics.x.vel = outer.car.physics.x.vel + (vel.x*dt/20);
                end
            end
        end
    with
        // drop vs *
        var integer dt;
        every dt in FRAMES_UPDATE do
            var&? Drop drop1;
            loop drop1 in outer.drops
            do
                // drop vs drop
                var&? Drop drop2;
                loop drop2 in outer.drops do
                    if (&&drop1!.physics as usize) < (&&drop2!.physics as usize)
                        and (call Intersects(&drop1!.physics, &drop2!.physics))
                    then
                        if drop1!.has_collided then
                            drop1!.physics.x.vel = +50;
                        end
                        if drop2!.has_collided then
                            drop2!.physics.x.vel = -50;
                        end
                    end
                end

                // drop vs car
                if (call Intersects(&drop1!.physics, &outer.car.physics)) then
                    if drop1!.physics.y.pst > outer.car.physics.y.pst then
                        drop1!.physics.y.pst = outer.car.physics.y.pst + drop1!.physics.y.len;
                        drop1!.physics.y.vel = -(drop1!.physics.y.vel/3);
                        drop1!.physics.x.vel = outer.car.physics.x.vel / 2;
                        drop1!.has_collided = yes;
                    else
                        drop1!.physics.x.vel = outer.car.physics.x.vel * 2;
                        drop1!.physics.y.vel = (_abs(outer.car.physics.x.vel));
                    end
                end

                // drop vs boom
                var&? Boom boom;
                loop boom in outer.booms do
                    if (call Intersects(&drop1!.physics, &boom!.physics)) then
                        var Vector2D vel = call Boom_Vel(&boom!.physics, &drop1!.physics);
                        drop1!.physics.x.vel = drop1!.physics.x.vel + (vel.x*dt);
                        drop1!.physics.y.vel = drop1!.physics.y.vel + (vel.y*dt);
                    end
                end
            end
        end
    end
end
