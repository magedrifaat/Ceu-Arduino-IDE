data Axis with
    var real    pst;
    var integer len;
    var real    vel;
    var real    acc;
    var real    drag;
end

data IPhysics with
    var Axis   x;
    var Axis   y;
    var Color? clr;
end

code/await Physics (var Rect rct, var Color? clr)
                    -> (var IPhysics physics)
                        -> NEVER
do
    physics = val IPhysics(Axis(rct.x, rct.w, 0, 0, 0),
                           Axis(rct.y, rct.h, 0, 0, 0),
                           clr);

    par do
        var integer dt_;
        every dt_ in FRAMES_UPDATE do
            var real dt = (dt_ as real)/1000;
            physics.x.vel = (physics.x.vel + physics.x.acc*dt)
                                * (1 - physics.x.drag*dt);
            physics.y.vel = (physics.y.vel + physics.y.acc*dt)
                                * (1 - physics.y.drag*dt);
            physics.x.pst = physics.x.pst + physics.x.vel*dt;
            physics.y.pst = physics.y.pst + physics.y.vel*dt;
        end
    with
        every FRAMES_REDRAW do
            if not physics.clr? then
                continue;
            end
            emit GRAPHICS_SET_COLOR_RGB(physics.clr!.r, physics.clr!.g, physics.clr!.b);
            emit GRAPHICS_DRAW_RECT(physics.x.pst as integer,
                                    physics.y.pst as integer,
                                    physics.x.len as integer,
                                    physics.y.len as integer);
        end
    end
end

code/call Intersects (var& IPhysics phy1, var& IPhysics phy2) -> bool
do
    escape not (phy1.x.pst+phy1.x.len < phy2.x.pst or
                phy1.y.pst-phy1.y.len > phy2.y.pst or
                phy2.x.pst+phy2.x.len < phy1.x.pst or
                phy2.y.pst-phy2.y.len > phy1.y.pst);
end
