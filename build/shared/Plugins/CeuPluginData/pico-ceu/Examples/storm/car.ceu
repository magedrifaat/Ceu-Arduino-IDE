code/await Wheel (var& IPhysics car, var Vector2D offset) -> none
do
    var integer radius = 15;
    var real esp = (2 * PI / 12);
    var real pst = 0;

    par do
        var integer dt;
        every dt in FRAMES_UPDATE do
            var integer s = do
                if car.x.vel >= 0 then
                    escape  1;
                else
                    escape -1;
                end
            end;

            var real mod = _sqrt(_pow(car.x.vel,2) + _pow(car.y.vel,2));
            pst = pst + (s * mod * dt / 1000 / radius);
        end
    with
        every FRAMES_REDRAW do
            emit GRAPHICS_SET_COLOR_RGB(0xFF, 0x9D, 0x46);
            var integer i;
            loop i in [0 -> 12[ do
                emit GRAPHICS_DRAW_RECT(
                        (car.x.pst + offset.x + (radius * _cos(i*esp + pst))) as integer,
                        (car.y.pst + offset.y + (radius * _sin(i*esp + pst))) as integer,
                        5, 5);
            end
        end
    end
end

code/await Car (none) -> (var& IPhysics physics) -> NEVER
do
    var& Physics car = spawn Physics(Rect(0,-240+50, 60,30), Color(0x3B,0xBC,0x48));
    physics = &car.physics;

    spawn Wheel(&physics, Vector2D(            0, -physics.y.len));
    spawn Wheel(&physics, Vector2D(physics.x.len, -physics.y.len));

    physics.x.drag = 0.95;
    physics.y.drag = 0.95;

    par do
        loop do
            var integer key = await KEY_PRESS until key==KEY_LEFT;
            physics.x.acc = -400;
            key = await KEY_UNPRESS until key==KEY_LEFT;
            physics.x.acc = 0;
        end
    with
        loop do
            var integer key = await KEY_PRESS until key==KEY_RIGHT;
            physics.x.acc = 400;
            key = await KEY_UNPRESS until key==KEY_RIGHT;
            physics.x.acc = 0;
        end
    end
end
