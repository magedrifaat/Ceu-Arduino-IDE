// compile with CEU_DEFS=-DCEU_PM_MIN

/*
 * With 1024 prescaler: 16M/1024 incs/s : 15625 incs/s
 * 4194304 us for 65536 incs
 */
#define CPU_FREQ        16000000                          // 16Mhz
#define INCS_PER_SECOND (CPU_FREQ/1024)                   // 15625
#define US_PER_CYCLE    (65536*1000000 / INCS_PER_SECOND) // 4194304
//#define US_TO_INCS(us)  ((us)*65536/US_PER_CYCLE)         // 65536/4194304 = 1/64
//#define US_TO_OVERFLOW(us) (65536 - US_TO_INCS(us))
// all simplified goes to this:
#define US_TO_INCS(us)  ((us)/64)
#define US_TO_OVERFLOW(us) (65536 - ((us)/64) - 64)
#define INCS_TO_US(incs) (((s32)(incs))*64)

native/const _TIMER1_COMPA_vect;
native _ceu_arduino_dt;

native/pos do
    ##define __WCLOCK_CEU__

    static u16 TIMER1_old;

    static void ceu_arduino_callback_wclock_min (s32 dt) {
        if (dt == CEU_WCLOCK_INACTIVE) {
            TIMSK1 = TIMSK1 & ~(1 << OCIE1A);
        } else {
            s32 v = US_TO_INCS(dt);
            ceu_assert(v < U16_MAX, "bug found");
            OCR1A = (TIMER1_old + v);
            TIMSK1 = TIMSK1 | (1 << OCIE1A);
        }
    }

    s32 ceu_arduino_callback_wclock_dt (void) { return 0; }

    s32 ceu_arduino_dt (void) {
        u16 now = TCNT1;
        s32 dt  = (now - TIMER1_old);
        TIMER1_old = now;
        return INCS_TO_US(dt);
    }
end

{
    TIMER1_old = TCNT1;
    TCCR1A = 0;
    TCCR1B = (1 << CS12) | (1 << CS10); // 1024 prescaler
}

input none DT;

var u32 dt = _;

spawn async/isr [_TIMER1_COMPA_vect, 0] do
    outer.dt = _ceu_arduino_dt();
    emit DT;
end

spawn do
    loop do
        await DT;
        await async (dt) do
            emit (dt)us;
        end
    end
end

_pinMode(13, _OUTPUT);

var int i;
loop i in [0->5[ do
    _digitalWrite(13,high);
    await 250ms;
    _digitalWrite(13,low);
    await 250ms;
end

await 1s;
loop i in [0->5[ do
    _digitalWrite(13,high);
    await 500ms;
    _digitalWrite(13,low);
    await 500ms;
end

await 1s;
loop i in [0->5[ do
    _digitalWrite(13,high);
    await 1s;
    _digitalWrite(13,low);
    await 1s;
end

await 1s;
loop i in [0->5[ do
    _digitalWrite(13,high);
    await 2s;
    _digitalWrite(13,low);
    await 2s;
end

await 1s;
_digitalWrite(13,high);
loop i in [0->10[ do
    await 1s;
end
_digitalWrite(13,low);

// ERROR here, overflow!
await 1s;
loop i in [0->5[ do
    _digitalWrite(13,high);
    await 5s;
    _digitalWrite(13,low);
    await 5s;
end
