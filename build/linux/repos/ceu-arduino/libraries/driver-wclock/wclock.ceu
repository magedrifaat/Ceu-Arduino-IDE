///////////////////////////////////////////////////////////////////////////////
// EXTERNAL INTERFACE
///////////////////////////////////////////////////////////////////////////////

// Language wall-clock timer (e.g., `await 1s`)

code/call WCLOCK_Now (none) -> u32 do
    escape { ceu_wclock_now() };
end

code/call WCLOCK_Freeze (var u32 us) -> none do
    _delayMicroseconds(us);
end

///////////////////////////////////////////////////////////////////////////////
// INTERNAL INTERFACE
///////////////////////////////////////////////////////////////////////////////

#ifndef CEU_WCLOCK_IRQ_N
    #error missing `CEU_WCLOCK_IRQ_N`
#endif

#ifndef CEU_WCLOCK_PRESCALER
    #error missing `CEU_WCLOCK_PRESCALER`
#endif

native/pre do
    ##define __WCLOCK_CEU__
    void ceu_wclock_init    (void);
    //void ceu_wclock         (bool v);      // TODO: ???
    void ceu_wclock_request (s32 us, bool was_active);
    void ceu_wclock_done    (void);
    s32  ceu_wclock_dt      (void);
    u32  ceu_wclock_now     (void);
end

///////////////////////////////////////////////////////////////////////////////
// INITIALIZATION
///////////////////////////////////////////////////////////////////////////////

#define CEU_WCLOCK_US_TO_INCS(us)     ((s32)(((double)(us))*F_CPU/CEU_WCLOCK_PRESCALER/1000000L))
#define CEU_WCLOCK_US_TO_OVERFLOW(us) (65536 - CEU_WCLOCK_US_TO_INCS(us) - 1) // -1: sleep one more tick to compensate math rounds
#define CEU_WCLOCK_INCS_TO_US(incs)   ((s32)(((double)(incs))*1000000L*CEU_WCLOCK_PRESCALER/F_CPU)+1) // +1: add one more us to compensate math round

native/pos do
    static bool ceu_wclock_is_active = 0;

    void ceu_arduino_callback_wclock_min (s32 dt) {
        ceu_wclock_request(dt, ceu_wclock_is_active);
        ceu_wclock_is_active = (dt != CEU_WCLOCK_INACTIVE);
        ceu_pm_set(CEU_PM_WCLOCK, ceu_wclock_is_active);
    }

    s32 ceu_arduino_callback_wclock_dt (void) {
        return (ceu_wclock_is_active) ? ceu_wclock_dt() : CEU_WCLOCK_INACTIVE;
    }
end

{
    ceu_wclock_init();
}

///////////////////////////////////////////////////////////////////////////////
// INPUT / OUTPUT
///////////////////////////////////////////////////////////////////////////////

input none CEU_WCLOCK;
spawn async/isr [CEU_WCLOCK_IRQ_N, 0] do
    {ceu_wclock_done();}
    emit CEU_WCLOCK;         // dummy emit to trigger `ceu_input` in env.ino
end
