#ifndef WCLOCK_SAMD_TIMER1
#define WCLOCK_SAMD_TIMER1

#define CEU_WCLOCK_IRQ_N     _TC4_Handler
#define CEU_PM_WCLOCK        CEU_PM_TC4
#define CEU_WCLOCK_PRESCALER 1024

#define ceu_tc4_init         ceu_wclock_init
#define ceu_tc4_request      ceu_wclock_request
#define ceu_tc4_done         ceu_wclock_done
#define ceu_tc4_dt           ceu_wclock_dt

native/const _TC4_Handler;

#include "../wclock.ceu"

native/pos do
    static u16 ceu_tc4_old;

    void ceu_tc4_init (void)
    {
        /* Based on <https://forum.arduino.cc/index.php?topic=425385.msg2931200#msg2931200> */

        // Set up the generic clock (GCLK4) used to clock timers
        REG_GCLK_GENDIV = GCLK_GENDIV_DIV(1) |          // Divide the 48MHz clock source by divisor 1: 48MHz/1=48MHz
                          GCLK_GENDIV_ID(4);            // Select Generic Clock (GCLK) 4
        CEU_SAMD_WAIT(*GCLK);

        REG_GCLK_GENCTRL = GCLK_GENCTRL_IDC |           // Set the duty cycle to 50/50 HIGH/LOW
                           GCLK_GENCTRL_GENEN |         // Enable GCLK4
                           GCLK_GENCTRL_SRC_DFLL48M |   // Set the 48MHz clock source
                           GCLK_GENCTRL_ID(4);          // Select GCLK4
        CEU_SAMD_WAIT(*GCLK);

        // Feed GCLK4 to TC4 and TC5
        REG_GCLK_CLKCTRL = GCLK_CLKCTRL_CLKEN |         // Enable GCLK4 to TC4 and TC5
                           GCLK_CLKCTRL_GEN_GCLK4 |     // Select GCLK4
                           GCLK_CLKCTRL_ID_TC4_TC5;     // Feed the GCLK4 to TC4 and TC5
        CEU_SAMD_WAIT(*GCLK);

        NVIC_SetPriority(TC4_IRQn, 0);                  // Set the NVIC priority to highest
        NVIC_EnableIRQ(TC4_IRQn);                       // Connect TC4 to NVIC

        REG_TC4_INTFLAG |= TC_INTFLAG_OVF;              // Clear the interrupt flags
        REG_TC4_INTENSET = TC_INTENSET_OVF;             // Enable TC4 interrupts

        ceu_tc4_old = REG_TC4_COUNT16_COUNT;

        REG_TC4_CTRLA |= TC_CTRLA_PRESCALER_DIV1024 |   // Set prescaler to 1024, 48MHz/1024 = 46.875kHz
                         TC_CTRLA_WAVEGEN_NFRQ |        // Put the timer TC4 into match frequency (MFRQ) mode
                         TC_CTRLA_ENABLE;               // Enable TC4
        CEU_SAMD_WAIT(TC4->COUNT16);
    }

    void ceu_tc4_request (s32 us, bool was_active) {
        if (us == CEU_WCLOCK_INACTIVE) {
            REG_TC4_CTRLBSET |= TCC_CTRLBSET_CMD_STOP;
        } else {
            // if was inactive, no time elapsed since previous `ceu_timer_dt`
            u16 elapsed = (was_active) ? (REG_TC4_COUNT16_COUNT - ceu_tc4_old) : 0;
            s32 v = CEU_WCLOCK_US_TO_OVERFLOW(us) + elapsed;
            if (v < 128) {  // since 16-bit counter can count ~1s, needs to overflow many times
                v = 128;    // 128 >>> "overflow + incs-before-request"
            }
            ceu_assert(v<65536, "bug found");
            REG_TC4_COUNT16_COUNT = v;
            ceu_tc4_old = (v - elapsed);
            REG_TC4_CTRLBSET |= TCC_CTRLBSET_CMD_RETRIGGER;
        }
    }

    void ceu_tc4_done (void) {
        REG_TC4_INTFLAG = TC_INTFLAG_OVF;       // clears the ovf flag
    }

    s32 ceu_tc4_dt (void) {
        u16 now = REG_TC4_COUNT16_COUNT;
        //ceu_assert(now<128, "bug found");     (not really, only if called due to CEU_WCLOCK)
        s32 dt  = (u16)(now - ceu_tc4_old);
        ceu_tc4_old = now;
        return CEU_WCLOCK_INCS_TO_US(dt);
    }
end

#endif
