#ifndef SAMD_SAMD_CEU
#define SAMD_SAMD_CEU

#define CEU_SAMD_WAIT(x) while ((x).STATUS.bit.SYNCBUSY == 1)

native/pre do
    ##define CEU_ISR(id) void id (void)
    ##define S SerialUSB
end

// copied from "cores/arduino/wiring_private.c"
native/pre do
    int gpio_samd_pinPeripheral (uint32_t ulPin, EPioType ulPeripheral) {
        // Handle the case the pin isn't usable as PIO
        if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN ) {
            return -1 ;
        }
        switch ( ulPeripheral ) {
            case PIO_DIGITAL:
            case PIO_INPUT:
            case PIO_INPUT_PULLUP:
            case PIO_OUTPUT:
                // Disable peripheral muxing, done in pinMode
                //			PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].bit.PMUXEN = 0 ;

                // Configure pin mode, if requested
                if ( ulPeripheral == PIO_INPUT ) {
                    pinMode( ulPin, INPUT ) ;
                } else {
                    if ( ulPeripheral == PIO_INPUT_PULLUP ) {
                        pinMode( ulPin, INPUT_PULLUP ) ;
                    } else {
                        if ( ulPeripheral == PIO_OUTPUT ) {
                            pinMode( ulPin, OUTPUT ) ;
                        } else {
                            // PIO_DIGITAL, do we have to do something as all cases are covered?
                        }
                    }
                }
                break ;
            case PIO_ANALOG:
            case PIO_SERCOM:
            case PIO_SERCOM_ALT:
            case PIO_TIMER:
            case PIO_TIMER_ALT:
            case PIO_EXTINT:
            case PIO_COM:
            case PIO_AC_CLK:
    #if 0
                // Is the pio pin in the lower 16 ones?
                // The WRCONFIG register allows update of only 16 pin max out of 32
                if ( g_APinDescription[ulPin].ulPin < 16 )
                {
                    PORT->Group[g_APinDescription[ulPin].ulPort].WRCONFIG.reg = PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                        PORT_WRCONFIG_WRPINCFG |
                        PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin ) ;
                }
                else
                {
                    PORT->Group[g_APinDescription[ulPin].ulPort].WRCONFIG.reg = PORT_WRCONFIG_HWSEL |
                        PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_PMUXEN | PORT_WRCONFIG_PMUX( ulPeripheral ) |
                        PORT_WRCONFIG_WRPINCFG |
                        PORT_WRCONFIG_PINMASK( g_APinDescription[ulPin].ulPin - 16 ) ;
                }
    #else
                if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
                {
                    uint32_t temp ;
                    // Get whole current setup for both odd and even pins and remove odd one
                    temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
                    // Set new muxing
                    PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
                    // Enable port mux
                    PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
                }
                else // even pin
                {
                    uint32_t temp ;
                    temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
                    PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
                    PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
                }
    #endif
                break ;
            case PIO_NOT_A_PIN:
                return -1l ;
                break ;
        }
        return 0l ;
    }
end

#endif
