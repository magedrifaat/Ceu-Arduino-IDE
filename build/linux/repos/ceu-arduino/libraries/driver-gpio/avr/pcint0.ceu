input none PCINT0;

// PORT 0/B
// Uno:  D8-D13
// Mega: D53-D50, D10-D13

code/call PCINT0_Enable (var int pcint, var on/off v) -> none do
    if v then
        {
            bitClear(DDRB, @pcint);  // input
            bitSet(PORTB, @pcint);   // pullup
            bitSet(PCMSK0, @pcint);  // interrupt enable
        }
    else
        {
            bitClear(PCMSK0, @pcint);
        }
    end
end

code/call PCINT0_Get (var int pcint) -> high/low do
    escape _bitRead({PINB}, pcint) as high/low;
end

native/const _PCINT0_vect;

{
    bitSet(PCICR,  PCIE0);  // enables port 0
}

spawn async/isr [_PCINT0_vect, 0] do
    emit PCINT0;
end

code/await PCINT0_Demux (none) -> (event (int,high/low) e) -> NEVER do
    code/call Read (none) -> u8 do
        var u8 cur = 0;
        var int bit;
        loop bit in [_PCINT0 -> _PCINT7] do
            if _bitRead({PCMSK0},bit) == 1 then
                _bitWrite(cur, bit, call PCINT0_Get(bit));
            end
        end
        escape cur;
    end

    var u8 old = call Read();
    loop do
        await PCINT0;
        var u8 cur = call Read();
        var u8 dif = cur ^ old;
        old = cur;
        var int bit;
        loop bit in [_PCINT0 -> _PCINT7] do
            if _bitRead(dif,bit) == 1 then
                emit e(bit, (_bitRead(cur,bit) as high/low));
            end
        end
    end
end
